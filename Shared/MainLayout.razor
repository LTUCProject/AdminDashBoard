@inherits LayoutComponentBase
@using Services
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>EVision Admin Dashboard</PageTitle>

@if (!_isLoggedIn)
{
    <div class="login-container">
        <div class="login-box">
            <h1>Welcome to EVision</h1>
            <p>Login to access your admin dashboard.</p>
            <div class="login-form">
                @Body
            </div>
        </div>
    </div>
}
else
{
    <div class="dashboard">
        <aside class="sidebar">
            <div class="sidebar-header">
                <h2>EVision</h2>
            </div>
            <NavMenu />
        </aside>

        <main class="main-content">
            <header class="top-bar">
                <h3>Admin Dashboard</h3>
                <button class="btn btn-logout" @onclick="Logout">Logout</button>
            </header>
            <section class="content">
                @Body
            </section>
        </main>
    </div>
}

<style>
    /* General Reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
        color: #343a40;
    }

    /* Login Page Styles */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(135deg, #6c63ff, #3a3d99);
    }

    .login-box {
        background: #fff;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        max-width: 400px;
        width: 100%;
    }

        .login-box h1 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #3a3d99;
        }

        .login-box p {
            margin-bottom: 1.5rem;
        }

    .login-form {
        display: flex;
        flex-direction: column;
    }

    /* Dashboard Styles */
    .dashboard {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    /* Sidebar Styles */
    .sidebar {
        width: 250px;
        background-color: #3a3d99;
        color: #fff;
        display: flex;
        flex-direction: column;
        padding: 1rem;
        height: 100%;
        position: fixed;
    }

    .sidebar-header {
        margin-bottom: 1.5rem;
        text-align: center;
    }

        .sidebar-header h2 {
            font-size: 1.5rem;
            color: #fff;
            font-weight: bold;
        }

    nav a {
        display: block;
        padding: 0.75rem 1rem;
        color: #dcdde1;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

        nav a:hover {
            background-color: #575abf;
            color: #fff;
        }

        nav a.active {
            background-color: #6c63ff;
            color: #fff;
        }

    /* Main Content */
    .main-content {
        flex: 1;
        margin-left: 250px;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .top-bar {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .top-bar h3 {
            font-size: 1.25rem;
            margin: 0;
        }

    .content {
        flex: 1;
        padding: 1.5rem;
        background-color: #fff;
        border-radius: 8px;
        margin: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        overflow: auto;
    }

    /* Buttons */
    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-logout {
        background-color: #dc3545;
        color: #fff;
    }

        .btn-logout:hover {
            background-color: #c82333;
        }

   
</style>

@code {
    private bool _isLoggedIn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckLoginStatus();
            StateHasChanged();
        }
    }

    private async Task CheckLoginStatus()
    {
        _isLoggedIn = await AuthService.IsLoggedIn();
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        _isLoggedIn = false;
        Navigation.NavigateTo("/login");
    }
}
