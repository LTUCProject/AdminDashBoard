@page "/clients"
@using Admin.Services
@using Admin.Dto_s
@inject AdminService AdminService
@inject IJSRuntime JSRuntime // Injecting IJSRuntime for JS interop

<link href="css/client.css" rel="stylesheet" />

<h3 class="page-title">Client List</h3>

<!-- Client Count Section -->
<div class="client-count-container mb-4">
    <h4>Total Clients: <span class="client-count">@clients?.Count</span></h4>
</div>

<!-- Search Bar -->
<div class="search-bar mb-3">
    <input @bind="searchQuery" class="form-control search-input" placeholder="Search by name or email..." @oninput="FilterClients" />
</div>

<!-- Feedback Message (Success/Error) -->
@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert @feedbackClass alert-dismissible fade show" role="alert">
        @feedbackMessage
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<!-- Client Table -->
@if (clients == null)
{
    <p><em>Loading...</em><div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div></p>
}
else if (clients.Count == 0)
{
    <p>No clients found.</p>
}
else
{
    <table class="table client-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Account ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in filteredClients)
            {
                <tr>
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td>@client.AccountId</td>
                    <td>
                        <button class="btn btn-danger delete-btn" @onclick="() => DeleteClient(client.ClientId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ClientBlazorDto> clients;
    private List<ClientBlazorDto> filteredClients;
    private string searchQuery = "";
    private string feedbackMessage;
    private string feedbackClass;

    protected override async Task OnInitializedAsync()
    {
        clients = await AdminService.GetAllClientsAsync();
        filteredClients = clients; // Initialize filteredClients with all clients
    }

    // Method to filter the client list based on the search query
    private void FilterClients()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredClients = clients; // Reset to full list if search query is empty
        }
        else
        {
            filteredClients = clients.Where(client =>
                client.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                client.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task DeleteClient(int clientId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new[] { "Are you sure you want to delete this client?" });

        if (confirmed)
        {
            try
            {
                await AdminService.DeleteClientAsync(clientId);
                clients = await AdminService.GetAllClientsAsync(); // Refresh the client list
                filteredClients = clients; // Reset filtered list to the full client list
                feedbackMessage = "Client deleted successfully!";
                feedbackClass = "alert-success";
            }
            catch (Exception ex)
            {
                feedbackMessage = $"Failed to delete client: {ex.Message}";
                feedbackClass = "alert-danger";
            }
        }
    }
}