@page "/chargingstations"
@using MidProject.Models.Dto.Response
@using Admin.Services
@using Admin.Dto_s
@inject Admin.Services.AdminService AdminService
@inject IJSRuntime JSRuntime // Injecting IJSRuntime for JS interop

<link href="css/chargingstation.css" rel="stylesheet" />

<h3 class="charging-station-count">Charging Stations Management</h3>

<!-- Charging Station Counts Section -->
<div class="charging-station-count-container mb-4 text-center">
    <h4>Total Charging Stations: <span class="charging-station-count">@chargingStations?.Count </span></h4>
    <h5>Active Stations: <span class="charging-station-count">@activeCount</span></h5>
    <h5>Inactive Stations: <span class="charging-station-count">@inactiveCount</span></h5>
</div>

@if (chargingStations == null)
{
    <div class="text-center">
        <p class="spinner-border" role="status"><span class="sr-only">Loading...</span></p>
    </div>
}
else if (!chargingStations.Any())
{
    <div class="alert alert-warning text-center">
        <p class="ap">No charging stations found.</p>
        <p class="ap">Please refresh the page or check back later.</p>
    </div>
}
else
{
    <!-- Active Stations Table -->
    <h4>Active Charging Stations</h4>
    @if (activeStations == null || !activeStations.Any())
    {
        <p class="ap">No active charging stations found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Location</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Address</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                        <th>Provider</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var station in activeStations)
                    {
                        <tr>
                            <td>@station.ChargingStationId</td>
                            <td>@station.StationLocation</td>
                            <td>@station.Name</td>
                            <td>@station.Status</td>
                            <td>@station.Address</td>
                            <td>@station.Latitude</td>
                            <td>@station.Longitude</td>
                            <td>@station.Provider?.Name</td>
                            <td>
                                <button @onclick="() => ConfirmDelete(station.ChargingStationId)" class="btn btn-danger btn-sm">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <!-- Inactive Stations Table -->
    <h4>Inactive Charging Stations</h4>
    @if (inactiveStations == null || !inactiveStations.Any())
    {
        <p class="ap">No inactive charging stations found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Location</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>Address</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                        <th>Provider</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var station in inactiveStations)
                    {
                        <tr>
                            <td>@station.ChargingStationId</td>
                            <td>@station.StationLocation</td>
                            <td>@station.Name</td>
                            <td>@station.Status</td>
                            <td>@station.Address</td>
                            <td>@station.Latitude</td>
                            <td>@station.Longitude</td>
                            <td>@station.Provider?.Name</td>
                            <td>
                                <button @onclick="() => ConfirmDelete(station.ChargingStationId)" class="btn btn-danger btn-sm">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private List<ChargingStationBlazorDto> chargingStations;
    private List<ChargingStationBlazorDto> activeStations;
    private List<ChargingStationBlazorDto> inactiveStations;
    private int activeCount;
    private int inactiveCount;
    private bool isPrerenderingComplete = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isPrerenderingComplete = true;
            await LoadChargingStations(); // Load data after prerendering
            StateHasChanged(); // Trigger a re-render
        }
    }

    private async Task LoadChargingStations()
    {
        if (isPrerenderingComplete)
        {
            try
            {
                chargingStations = (await AdminService.GetAllChargingStationsAsync()).ToList();
                FilterStations(); // Apply sorting and filtering after loading
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading charging stations: {ex.Message}");
            }
        }
    }

    private void FilterStations()
    {
        // Sort the charging stations into active and inactive based on status
        activeStations = chargingStations?.Where(station => station.Status == "Active").ToList() ?? new List<ChargingStationBlazorDto>();
        inactiveStations = chargingStations?.Where(station => station.Status == "Inactive").ToList() ?? new List<ChargingStationBlazorDto>();

        // Count the number of Active and Inactive stations
        activeCount = activeStations.Count;
        inactiveCount = inactiveStations.Count;
    }

    private async Task ConfirmDelete(int id)
    {
        if (isPrerenderingComplete)
        {
            bool confirmed = await ShowDeleteConfirmation();
            if (confirmed)
            {
                try
                {
                    await AdminService.DeleteChargingStationAsync(id);
                    await LoadChargingStations(); // Refresh the list after deletion
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting charging station: {ex.Message}");
                }
            }
        }
    }

    private async Task<bool> ShowDeleteConfirmation()
    {
        // Call JavaScript function for confirmation
        return await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this charging station?");
    }
}

<style>
    .charging-station-count-container {
        background-color: #f7f7f7;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .charging-station-count {
        font-weight: bold;
        color: #007bff;
    }

    h4, h5 {
        margin-bottom: 10px;
    }

    .table-responsive {
        margin-top: 20px;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .table-hover tbody tr:hover {
        background-color: #e9ecef;
    }

    .btn-sm {
        padding: 5px 10px;
        font-size: 0.875rem;
    }

    .alert-warning {
        margin-top: 20px;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
</style>
