@page "/providers"
@using Admin.Dto_s
@using Admin.Services
@inject Admin.Services.AdminService AdminService
@inject IJSRuntime JSRuntime // Injecting IJSRuntime for JS interop

<link href="css/provider.css" rel="stylesheet" />

<h3 class="page-title">Providers List</h3>

<!-- Provider Counts Section -->
<div class="provider-count-container mb-4">
    <h4>Total Providers: <span class="provider-count">@providers?.Count </span></h4>
    <h5>Owner Providers: <span class="provider-count">@ownerCount</span></h5>
    <h5>Servicer Providers: <span class="provider-count">@servicerCount</span></h5>
</div>

<!-- Search Bar -->
<div class="search-bar mb-3">
    <input @bind="searchQuery" class="form-control search-input" placeholder="Search by name or email..." @oninput="FilterProviders" />
</div>

<!-- Feedback Message (Success/Error) -->
@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert @feedbackClass alert-dismissible fade show" role="alert">
        @feedbackMessage
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<!-- Owner Providers Table -->
<h4>Owner Providers</h4>
@if (ownerProviders == null)
{
    <p><em>Loading...</em><div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div></p>
}
else if (ownerProviders.Count == 0)
{
    <p>No Owner providers found.</p>
}
else
{
    <table class="table provider-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var provider in ownerProviders)
            {
                <tr>
                    <td>@provider.ProviderId</td>
                    <td>@provider.Name</td>
                    <td>@provider.Email</td>
                    <td>@provider.Type</td>
                    <td>
                        <button class="btn btn-danger delete-btn" @onclick="() => DeleteProvider(provider.ProviderId)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Servicer Providers Table -->
<h4>Servicer Providers</h4>
@if (servicerProviders == null)
{
    <p><em>Loading...</em><div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div></p>
}
else if (servicerProviders.Count == 0)
{
    <p>No Servicer providers found.</p>
}
else
{
    <table class="table provider-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var provider in servicerProviders)
            {
                <tr>
                    <td>@provider.ProviderId</td>
                    <td>@provider.Name</td>
                    <td>@provider.Email</td>
                    <td>@provider.Type</td>
                    <td>
                        <button class="btn btn-danger delete-btn" @onclick="() => DeleteProvider(provider.ProviderId)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AllProviderBlazorDto> providers;
    private List<AllProviderBlazorDto> ownerProviders;
    private List<AllProviderBlazorDto> servicerProviders;
    private int ownerCount;
    private int servicerCount;
    private string searchQuery = "";
    private string feedbackMessage;
    private string feedbackClass;
    private bool isPrerenderingComplete = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isPrerenderingComplete = true;
            await LoadProviders();
            StateHasChanged(); // Trigger re-render
        }
    }

    private async Task LoadProviders()
    {
        if (isPrerenderingComplete)
        {
            providers = await AdminService.GetAllProvidersAsync();
            FilterProviders(); // Apply initial filtering
        }
    }

    private void FilterProviders()
    {
        if (providers == null) return;

        var filteredList = string.IsNullOrWhiteSpace(searchQuery)
            ? providers
            : providers.Where(provider =>
                provider.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                provider.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

        ownerProviders = filteredList.Where(provider => provider.Type == "Owner").ToList();
        servicerProviders = filteredList.Where(provider => provider.Type == "Servicer").ToList();

        ownerCount = ownerProviders.Count;
        servicerCount = servicerProviders.Count;
    }

    private async Task DeleteProvider(int providerId)
    {
        if (isPrerenderingComplete)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new[] { "Are you sure you want to delete this provider?" });

            if (confirmed)
            {
                try
                {
                    await AdminService.DeleteProviderAsync(providerId);
                    await LoadProviders(); // Refresh the provider list
                    feedbackMessage = "Provider deleted successfully!";
                    feedbackClass = "alert-success";
                }
                catch (Exception ex)
                {
                    feedbackMessage = $"Failed to delete provider: {ex.Message}";
                    feedbackClass = "alert-danger";
                }
            }
        }
    }
}
